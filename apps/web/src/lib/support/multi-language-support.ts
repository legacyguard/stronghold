// Multi-Language Support System for Phase 6C
// Advanced language detection and support responses

import { createClient } from '@/lib/supabase';
import { SupportAIManager, SupportAIResponse, SupportContext } from './support-ai-manager';

export type SupportedLanguage = 'sk' | 'cs' | 'en' | 'de' | 'pl' | 'uk' | 'ru';

export interface LanguageDetectionResult {
  detected_language: SupportedLanguage;
  confidence: number;
  alternative_languages: { language: SupportedLanguage; confidence: number }[];
}

export interface MultiLanguageResponse {
  content: string;
  language: SupportedLanguage;
  translation_source: 'native' | 'translated' | 'ai_generated';
  confidence: number;
  original_response?: SupportAIResponse;
}

export interface LanguagePreferences {
  primary_language: SupportedLanguage;
  fallback_languages: SupportedLanguage[];
  auto_translate: boolean;
  translation_quality: 'fast' | 'balanced' | 'accurate';
}

export class MultiLanguageSupportManager {
  private supabase;
  private supportAI: SupportAIManager;

  // Rule-based responses in multiple languages
  private static MULTILINGUAL_RESPONSES: Record<string, Record<SupportedLanguage, string>> = {
    'password_reset': {
      'sk': `Na obnovenie hesla:

1. Kliknite na "Zabudli ste heslo?" na prihlasovcej str√°nke
2. Zadajte svoj email
3. Skontrolujte emailov√∫ schr√°nku (aj spam)
4. Kliknite na odkaz v emaili
5. Zadajte nov√© heslo

‚ö†Ô∏è **D√¥le≈æit√©:** Pre pr√≠stup k ≈°ifrovan√Ωm dokumentom budete potrebova≈• Recovery Kit.`,

      'cs': `Pro obnoven√≠ hesla:

1. Kliknƒõte na "Zapomnƒõli jste heslo?" na p≈ôihla≈°ovac√≠ str√°nce
2. Zadejte sv≈Øj email
3. Zkontrolujte emailovou schr√°nku (i spam)
4. Kliknƒõte na odkaz v emailu
5. Zadejte nov√© heslo

‚ö†Ô∏è **D≈Øle≈æit√©:** Pro p≈ô√≠stup k ≈°ifrovan√Ωm dokument≈Øm budete pot≈ôebovat Recovery Kit.`,

      'en': `To reset your password:

1. Click "Forgot password?" on the login page
2. Enter your email address
3. Check your email inbox (including spam)
4. Click the link in the email
5. Enter your new password

‚ö†Ô∏è **Important:** You'll need your Recovery Kit to access encrypted documents.`,

      'de': `Passwort zur√ºcksetzen:

1. Klicken Sie auf "Passwort vergessen?" auf der Anmeldeseite
2. Geben Sie Ihre E-Mail-Adresse ein
3. √úberpr√ºfen Sie Ihren Posteingang (auch Spam)
4. Klicken Sie auf den Link in der E-Mail
5. Geben Sie Ihr neues Passwort ein

‚ö†Ô∏è **Wichtig:** Sie ben√∂tigen Ihr Recovery Kit f√ºr den Zugriff auf verschl√ºsselte Dokumente.`,

      'pl': `Aby zresetowaƒá has≈Ço:

1. Kliknij "Zapomnia≈Çe≈õ has≈Ça?" na stronie logowania
2. Podaj sw√≥j adres email
3. Sprawd≈∫ skrzynkƒô pocztowƒÖ (tak≈ºe spam)
4. Kliknij link w emailu
5. Wprowad≈∫ nowe has≈Ço

‚ö†Ô∏è **Wa≈ºne:** Bƒôdziesz potrzebowaƒá Recovery Kit do dostƒôpu do zaszyfrowanych dokument√≥w.`,

      'uk': `–©–æ–± —Å–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–æ–ª—å:

1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ó–∞–±—É–ª–∏ –ø–∞—Ä–æ–ª—å?" –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –≤—Ö–æ–¥—É
2. –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É
3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ—à—Ç–æ–≤—É —Å–∫—Ä–∏–Ω—å–∫—É (–≤–∫–ª—é—á–Ω–æ –∑—ñ —Å–ø–∞–º–æ–º)
4. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º—É –ª–∏—Å—Ç—ñ
5. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å

‚ö†Ô∏è **–í–∞–∂–ª–∏–≤–æ:** –í–∞–º –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è Recovery Kit –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤.`,

      'ru': `–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:

1. –ù–∞–∂–º–∏—Ç–µ "–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?" –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞
2. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email –∞–¥—Ä–µ—Å
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ (–≤–∫–ª—é—á–∞—è —Å–ø–∞–º)
4. –ù–∞–∂–º–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ –ø–∏—Å—å–º–µ
5. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å

‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –í–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è Recovery Kit –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º.`
    },

    'will_validity': {
      'sk': `üèõÔ∏è **Pr√°vna platnos≈• z√°vetu:**

Aplik√°cia vygeneruje dokument obsahovo zodpovedaj√∫ci z√°konn√Ωm po≈æiadavk√°m, ale aby sa stal **pr√°vne platn√Ωm**:

**Slovensko:**
1. **Holografn√Ω z√°vet:** Cel√Ω vlastnoruƒçne prep√≠sa≈• a podp√≠sa≈•
2. **Alografn√Ω z√°vet:** Podp√≠sa≈• pred 2 svedkami (nie beneficienti)
3. **Not√°rsky z√°vet:** Podp√≠sa≈• pred not√°rom

üìã **Po vygenerovan√≠** dostanete presn√© in≈°trukcie.`,

      'cs': `üèõÔ∏è **Pr√°vn√≠ platnost z√°vƒõti:**

Aplikace vygeneruje dokument obsahovƒõ odpov√≠daj√≠c√≠ z√°konn√Ωm po≈æadavk≈Øm, ale aby se stal **pr√°vnƒõ platn√Ωm**:

**ƒåesko:**
1. **Holografn√≠ z√°vƒõ≈•:** Cel√Ω vlastnoruƒçnƒõ p≈ôepsat a podepsat
2. **Alografn√≠ z√°vƒõ≈•:** Podepsat p≈ôed 2 svƒõdky (ne beneficienti)
3. **Not√°≈ôsk√° z√°vƒõ≈•:** Podepsat p≈ôed not√°≈ôem

üìã **Po vygenerov√°n√≠** dostanete p≈ôesn√© instrukce.`,

      'en': `üèõÔ∏è **Will Legal Validity:**

The app generates a document that meets legal content requirements, but to become **legally valid**:

**Slovakia/Czech Republic:**
1. **Holographic will:** Write and sign entirely by hand
2. **Alographic will:** Sign before 2 witnesses (not beneficiaries)
3. **Notarial will:** Sign before a notary

üìã **After generation** you'll receive precise instructions.`,

      'de': `üèõÔ∏è **Rechtsg√ºltigkeit des Testaments:**

Die App generiert ein Dokument, das den gesetzlichen Anforderungen entspricht, aber um **rechtsg√ºltig** zu werden:

**Slowakei/Tschechien:**
1. **Eigenh√§ndiges Testament:** Vollst√§ndig handschriftlich verfassen und unterschreiben
2. **Allographisches Testament:** Vor 2 Zeugen unterzeichnen (nicht Beg√ºnstigte)
3. **Notarielles Testament:** Vor einem Notar unterzeichnen

üìã **Nach der Generierung** erhalten Sie genaue Anweisungen.`,

      'pl': `üèõÔ∏è **Wa≈ºno≈õƒá prawna testamentu:**

Aplikacja generuje dokument spe≈ÇniajƒÖcy wymogi prawne co do tre≈õci, ale aby sta≈Ç siƒô **prawnie wa≈ºny**:

**S≈Çowacja/Czechy:**
1. **Testament holograficzny:** Ca≈Çkowicie w≈Çasnorƒôcznie napisaƒá i podpisaƒá
2. **Testament alograficzny:** Podpisaƒá przed 2 ≈õwiadkami (nie beneficjentami)
3. **Testament notarialny:** Podpisaƒá przed notariuszem

üìã **Po wygenerowaniu** otrzymasz dok≈Çadne instrukcje.`,

      'uk': `üèõÔ∏è **–ü—Ä–∞–≤–æ–≤–∞ –¥—ñ–π—Å–Ω—ñ—Å—Ç—å –∑–∞–ø–æ–≤—ñ—Ç—É:**

–î–æ–¥–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä—É—î –¥–æ–∫—É–º–µ–Ω—Ç, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞–∫–æ–Ω–Ω–∏–º –≤–∏–º–æ–≥–∞–º —â–æ–¥–æ –∑–º—ñ—Å—Ç—É, –∞–ª–µ —â–æ–± —Å—Ç–∞—Ç–∏ **—é—Ä–∏–¥–∏—á–Ω–æ –¥—ñ–π—Å–Ω–∏–º**:

**–°–ª–æ–≤–∞—á—á–∏–Ω–∞/–ß–µ—Ö—ñ—è:**
1. **–ì–æ–ª–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–π –∑–∞–ø–æ–≤—ñ—Ç:** –ü–æ–≤–Ω—ñ—Å—Ç—é –≤–ª–∞—Å–Ω–æ—Ä—É—á –Ω–∞–ø–∏—Å–∞—Ç–∏ —ñ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏
2. **–ê–ª–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–π –∑–∞–ø–æ–≤—ñ—Ç:** –ü—ñ–¥–ø–∏—Å–∞—Ç–∏ –ø–µ—Ä–µ–¥ 2 —Å–≤—ñ–¥–∫–∞–º–∏ (–Ω–µ –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–∞–º–∏)
3. **–ù–æ—Ç–∞—Ä—ñ–∞–ª—å–Ω–∏–π –∑–∞–ø–æ–≤—ñ—Ç:** –ü—ñ–¥–ø–∏—Å–∞—Ç–∏ –ø–µ—Ä–µ–¥ –Ω–æ—Ç–∞—Ä—ñ—É—Å–æ–º

üìã **–ü—ñ—Å–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó** –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Ç–æ—á–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó.`,

      'ru': `üèõÔ∏è **–ü—Ä–∞–≤–æ–≤–∞—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≤–µ—â–∞–Ω–∏—è:**

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–æ–Ω–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é, –Ω–æ —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å **—é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º**:

**–°–ª–æ–≤–∞–∫–∏—è/–ß–µ—Ö–∏—è:**
1. **–ì–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—â–∞–Ω–∏–µ:** –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Ä—É—á–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å
2. **–ê–ª–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—â–∞–Ω–∏–µ:** –ü–æ–¥–ø–∏—Å–∞—Ç—å –ø–µ—Ä–µ–¥ 2 —Å–≤–∏–¥–µ—Ç–µ–ª—è–º–∏ (–Ω–µ –±–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä—ã)
3. **–ù–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—â–∞–Ω–∏–µ:** –ü–æ–¥–ø–∏—Å–∞—Ç—å –ø–µ—Ä–µ–¥ –Ω–æ—Ç–∞—Ä–∏—É—Å–æ–º

üìã **–ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏** –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.`
    },

    'document_security': {
      'sk': `üîí **Bezpeƒçnos≈• va≈°ich dokumentov:**

**Matematicky zaruƒçen√© s√∫kromie:**
- ‚úÖ End-to-end ≈°ifrovanie vo va≈°om prehliadaƒçi
- ‚úÖ Zero-knowledge architekt√∫ra - my nem√°me kƒæ√∫ƒçe
- ‚úÖ Nikto z LegacyGuard nem√¥≈æe ƒç√≠ta≈• va≈°e dokumenty
- ‚úÖ Ani my, ani hackers, ani vl√°dne in≈°tit√∫cie

üõ°Ô∏è **Va≈°e s√∫kromie je na≈°a priorita #1**`,

      'cs': `üîí **Bezpeƒçnost va≈°ich dokument≈Ø:**

**Matematicky zaruƒçen√© soukrom√≠:**
- ‚úÖ End-to-end ≈°ifrov√°n√≠ ve va≈°em prohl√≠≈æeƒçi
- ‚úÖ Zero-knowledge architektura - my nem√°me kl√≠ƒçe
- ‚úÖ Nikdo z LegacyGuard nem≈Ø≈æe ƒç√≠st va≈°e dokumenty
- ‚úÖ Ani my, ani hacke≈ôi, ani vl√°dn√≠ instituce

üõ°Ô∏è **Va≈°e soukrom√≠ je na≈°e priorita #1**`,

      'en': `üîí **Your Document Security:**

**Mathematically guaranteed privacy:**
- ‚úÖ End-to-end encryption in your browser
- ‚úÖ Zero-knowledge architecture - we don't have keys
- ‚úÖ No one at LegacyGuard can read your documents
- ‚úÖ Not us, not hackers, not government institutions

üõ°Ô∏è **Your privacy is our #1 priority**`,

      'de': `üîí **Sicherheit Ihrer Dokumente:**

**Mathematisch garantierte Privatsph√§re:**
- ‚úÖ End-to-End-Verschl√ºsselung in Ihrem Browser
- ‚úÖ Zero-Knowledge-Architektur - wir haben keine Schl√ºssel
- ‚úÖ Niemand bei LegacyGuard kann Ihre Dokumente lesen
- ‚úÖ Weder wir, noch Hacker, noch Regierungsinstitutionen

üõ°Ô∏è **Ihre Privatsph√§re ist unsere Priorit√§t #1**`,

      'pl': `üîí **Bezpiecze≈Ñstwo Twoich dokument√≥w:**

**Matematycznie gwarantowana prywatno≈õƒá:**
- ‚úÖ Szyfrowanie end-to-end w Twojej przeglƒÖdarce
- ‚úÖ Architektura zero-knowledge - nie mamy kluczy
- ‚úÖ Nikt w LegacyGuard nie mo≈ºe czytaƒá Twoich dokument√≥w
- ‚úÖ Ani my, ani hakerzy, ani instytucje rzƒÖdowe

üõ°Ô∏è **Twoja prywatno≈õƒá to nasz priorytet #1**`,

      'uk': `üîí **–ë–µ–∑–ø–µ–∫–∞ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤:**

**–ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–æ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å:**
- ‚úÖ –ù–∞—Å–∫—Ä—ñ–∑–Ω–µ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è —É –≤–∞—à–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ
- ‚úÖ Zero-knowledge –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ - —É –Ω–∞—Å –Ω–µ–º–∞—î –∫–ª—é—á—ñ–≤
- ‚úÖ –ù—ñ—Ö—Ç–æ –≤ LegacyGuard –Ω–µ –º–æ–∂–µ —á–∏—Ç–∞—Ç–∏ –≤–∞—à—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏
- ‚úÖ –ù—ñ –º–∏, –Ω—ñ —Ö–∞–∫–µ—Ä–∏, –Ω—ñ –¥–µ—Ä–∂–∞–≤–Ω—ñ —É—Å—Ç–∞–Ω–æ–≤–∏

üõ°Ô∏è **–í–∞—à–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å - –Ω–∞—à –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç #1**`,

      'ru': `üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**

**–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:**
- ‚úÖ End-to-end —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ
- ‚úÖ Zero-knowledge –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ - —É –Ω–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π
- ‚úÖ –ù–∏–∫—Ç–æ –≤ LegacyGuard –Ω–µ –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å –≤–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
- ‚úÖ –ù–∏ –º—ã, –Ω–∏ —Ö–∞–∫–µ—Ä—ã, –Ω–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è

üõ°Ô∏è **–í–∞—à–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å - –Ω–∞—à –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç #1**`
    }
  };

  // Language detection patterns
  private static LANGUAGE_PATTERNS: Record<SupportedLanguage, string[]> = {
    'sk': ['heslo', 'z√°vet', 'doklad', 'pr√°vny', 'naliehav√©', 'probl√©m', 'zabudol'],
    'cs': ['heslo', 'z√°vƒõ≈•', 'doklad', 'pr√°vn√≠', 'nal√©hav√©', 'probl√©m', 'zapomnƒõl'],
    'en': ['password', 'will', 'document', 'legal', 'urgent', 'problem', 'forgot'],
    'de': ['passwort', 'testament', 'dokument', 'rechtlich', 'dringend', 'problem', 'vergessen'],
    'pl': ['has≈Ço', 'testament', 'dokument', 'prawny', 'pilne', 'problem', 'zapomnia≈Ç'],
    'uk': ['–ø–∞—Ä–æ–ª—å', '–∑–∞–ø–æ–≤—ñ—Ç', '–¥–æ–∫—É–º–µ–Ω—Ç', '–ø—Ä–∞–≤–æ–≤–∏–π', '—Ç–µ—Ä–º—ñ–Ω–æ–≤–æ', '–ø—Ä–æ–±–ª–µ–º–∞', '–∑–∞–±—É–≤'],
    'ru': ['–ø–∞—Ä–æ–ª—å', '–∑–∞–≤–µ—â–∞–Ω–∏–µ', '–¥–æ–∫—É–º–µ–Ω—Ç', '–ø—Ä–∞–≤–æ–≤–æ–π', '—Å—Ä–æ—á–Ω–æ', '–ø—Ä–æ–±–ª–µ–º–∞', '–∑–∞–±—ã–ª']
  };

  constructor() {
    this.supabase = createClient();
    this.supportAI = new SupportAIManager();
  }

  /**
   * Detect language from user input
   */
  detectLanguage(text: string): LanguageDetectionResult {
    const textLower = text.toLowerCase();
    const scores: Record<SupportedLanguage, number> = {
      'sk': 0, 'cs': 0, 'en': 0, 'de': 0, 'pl': 0, 'uk': 0, 'ru': 0
    };

    // Score each language based on pattern matches
    Object.entries(MultiLanguageSupportManager.LANGUAGE_PATTERNS).forEach(([lang, patterns]) => {
      patterns.forEach(pattern => {
        if (textLower.includes(pattern)) {
          scores[lang as SupportedLanguage] += 1;
        }
      });
    });

    // Normalize scores
    const totalMatches = Object.values(scores).reduce((sum, score) => sum + score, 0);
    if (totalMatches === 0) {
      // Default to Slovak if no patterns match
      return {
        detected_language: 'sk',
        confidence: 0.5,
        alternative_languages: [
          { language: 'en', confidence: 0.3 },
          { language: 'cs', confidence: 0.2 }
        ]
      };
    }

    // Find best match
    const sortedLanguages = Object.entries(scores)
      .map(([lang, score]) => ({
        language: lang as SupportedLanguage,
        confidence: score / totalMatches
      }))
      .sort((a, b) => b.confidence - a.confidence);

    return {
      detected_language: sortedLanguages[0].language,
      confidence: sortedLanguages[0].confidence,
      alternative_languages: sortedLanguages.slice(1, 3)
    };
  }

  /**
   * Generate multilingual support response
   */
  async generateMultilingualResponse(
    query: string,
    context: SupportContext,
    userId: string,
    targetLanguage?: SupportedLanguage
  ): Promise<MultiLanguageResponse> {

    // 1. Detect language if not specified
    const languageDetection = this.detectLanguage(query);
    const language = targetLanguage || languageDetection.detected_language;

    // 2. Try rule-based responses first
    const ruleBasedResponse = this.getMultilingualRuleResponse(query, language);
    if (ruleBasedResponse) {
      return {
        content: ruleBasedResponse,
        language,
        translation_source: 'native',
        confidence: 0.95
      };
    }

    // 3. Get response in primary language (Slovak) and translate if needed
    const primaryResponse = await this.supportAI.generateSupportResponse(query, context, userId);

    if (language === 'sk') {
      return {
        content: primaryResponse.content,
        language: 'sk',
        translation_source: 'native',
        confidence: primaryResponse.confidence,
        original_response: primaryResponse
      };
    }

    // 4. Translate response to target language
    const translatedContent = await this.translateResponse(primaryResponse.content, language);

    return {
      content: translatedContent,
      language,
      translation_source: 'translated',
      confidence: primaryResponse.confidence * 0.9, // Slightly reduce confidence for translations
      original_response: primaryResponse
    };
  }

  /**
   * Get rule-based response in specific language
   */
  private getMultilingualRuleResponse(query: string, language: SupportedLanguage): string | null {
    const queryLower = query.toLowerCase();

    // Check for password reset patterns
    if (queryLower.includes('heslo') || queryLower.includes('password') ||
        queryLower.includes('passwort') || queryLower.includes('has≈Ço') ||
        queryLower.includes('–ø–∞—Ä–æ–ª—å')) {
      return MultiLanguageSupportManager.MULTILINGUAL_RESPONSES.password_reset[language];
    }

    // Check for will validity patterns
    if ((queryLower.includes('z√°vet') || queryLower.includes('z√°vƒõ≈•') ||
         queryLower.includes('will') || queryLower.includes('testament') ||
         queryLower.includes('–∑–∞–ø–æ–≤—ñ—Ç') || queryLower.includes('–∑–∞–≤–µ—â–∞–Ω–∏–µ')) &&
        (queryLower.includes('platn√Ω') || queryLower.includes('platn√Ω') ||
         queryLower.includes('valid') || queryLower.includes('g√ºltig') ||
         queryLower.includes('wa≈ºny') || queryLower.includes('–¥—ñ–π—Å–Ω–∏–π') ||
         queryLower.includes('–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π'))) {
      return MultiLanguageSupportManager.MULTILINGUAL_RESPONSES.will_validity[language];
    }

    // Check for security patterns
    if (queryLower.includes('bezpeƒçnos≈•') || queryLower.includes('bezpeƒçnost') ||
        queryLower.includes('security') || queryLower.includes('sicherheit') ||
        queryLower.includes('bezpiecze≈Ñstwo') || queryLower.includes('–±–µ–∑–ø–µ–∫–∞') ||
        queryLower.includes('–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å')) {
      return MultiLanguageSupportManager.MULTILINGUAL_RESPONSES.document_security[language];
    }

    return null;
  }

  /**
   * Translate response to target language
   */
  private async translateResponse(content: string, targetLanguage: SupportedLanguage): Promise<string> {
    // For now, return a placeholder translation
    // In production, this would integrate with translation API

    const translations: Record<SupportedLanguage, string> = {
      'sk': content, // Original
      'cs': this.basicSlovakToCzechTranslation(content),
      'en': this.basicSlovakToEnglishTranslation(content),
      'de': `[DE] ${content}`, // Placeholder
      'pl': `[PL] ${content}`, // Placeholder
      'uk': `[UK] ${content}`, // Placeholder
      'ru': `[RU] ${content}`  // Placeholder
    };

    return translations[targetLanguage] || content;
  }

  /**
   * Basic Slovak to Czech translation (similar languages)
   */
  private basicSlovakToCzechTranslation(text: string): string {
    const replacements: Record<string, string> = {
      '√Ω': '√Ω',
      'z√°vet': 'z√°vƒõ≈•',
      '√∫ƒç': '√∫ƒç',
      'aplik√°cia': 'aplikace',
      'str√°nka': 'str√°nka',
      'heslo': 'heslo',
      'dokumenty': 'dokumenty',
      'pr√°vny': 'pr√°vn√≠',
      'kontaktujte': 'kontaktujte',
      'podporu': 'podporu'
    };

    let translated = text;
    Object.entries(replacements).forEach(([sk, cs]) => {
      translated = translated.replace(new RegExp(sk, 'gi'), cs);
    });

    return translated;
  }

  /**
   * Basic Slovak to English translation
   */
  private basicSlovakToEnglishTranslation(text: string): string {
    const replacements: Record<string, string> = {
      'Na obnovenie hesla:': 'To reset your password:',
      'Kliknite na': 'Click on',
      'Zadajte svoj email': 'Enter your email',
      'Skontrolujte emailov√∫ schr√°nku': 'Check your email inbox',
      'Zadajte nov√© heslo': 'Enter your new password',
      'D√¥le≈æit√©:': 'Important:',
      'Pre pr√≠stup k ≈°ifrovan√Ωm dokumentom': 'To access encrypted documents',
      'budete potrebova≈•': 'you will need',
      'Recovery Kit': 'Recovery Kit',
      'Bezpeƒçnos≈• va≈°ich dokumentov:': 'Your document security:',
      'Matematicky zaruƒçen√© s√∫kromie:': 'Mathematically guaranteed privacy:',
      'Va≈°e s√∫kromie je na≈°a priorita': 'Your privacy is our priority'
    };

    let translated = text;
    Object.entries(replacements).forEach(([sk, en]) => {
      translated = translated.replace(new RegExp(sk, 'gi'), en);
    });

    return translated;
  }

  /**
   * Get user language preferences
   */
  async getUserLanguagePreferences(userId: string): Promise<LanguagePreferences> {
    try {
      const { data } = await this.supabase
        .from('user_profiles')
        .select('language_preferences')
        .eq('id', userId)
        .single();

      if (data?.language_preferences) {
        return data.language_preferences;
      }
    } catch (error) {
      console.error('Failed to get language preferences:', error);
    }

    // Default preferences
    return {
      primary_language: 'sk',
      fallback_languages: ['en', 'cs'],
      auto_translate: true,
      translation_quality: 'balanced'
    };
  }

  /**
   * Update user language preferences
   */
  async updateLanguagePreferences(userId: string, preferences: LanguagePreferences): Promise<void> {
    try {
      await this.supabase
        .from('user_profiles')
        .update({
          language_preferences: preferences,
          updated_at: new Date().toISOString()
        })
        .eq('id', userId);
    } catch (error) {
      console.error('Failed to update language preferences:', error);
      throw error;
    }
  }

  /**
   * Get supported languages list
   */
  getSupportedLanguages(): { code: SupportedLanguage; name: string; native_name: string }[] {
    return [
      { code: 'sk', name: 'Slovak', native_name: 'Slovenƒçina' },
      { code: 'cs', name: 'Czech', native_name: 'ƒåe≈°tina' },
      { code: 'en', name: 'English', native_name: 'English' },
      { code: 'de', name: 'German', native_name: 'Deutsch' },
      { code: 'pl', name: 'Polish', native_name: 'Polski' },
      { code: 'uk', name: 'Ukrainian', native_name: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞' },
      { code: 'ru', name: 'Russian', native_name: '–†—É—Å—Å–∫–∏–π' }
    ];
  }

  /**
   * Log language detection for analytics
   */
  private async logLanguageDetection(
    userId: string,
    query: string,
    detection: LanguageDetectionResult,
    response: MultiLanguageResponse
  ): Promise<void> {
    try {
      await this.supabase
        .from('support_interactions')
        .insert({
          ticket_id: null,
          message_type: 'system',
          content: JSON.stringify({
            type: 'language_detection',
            query_excerpt: query.substring(0, 100),
            detected_language: detection.detected_language,
            confidence: detection.confidence,
            response_language: response.language,
            translation_source: response.translation_source
          }),
          confidence_score: detection.confidence,
          knowledge_source: 'rule_based'
        });
    } catch (error) {
      console.error('Failed to log language detection:', error);
    }
  }
}

// Export utility functions
export function createMultiLanguageSupportManager(): MultiLanguageSupportManager {
  return new MultiLanguageSupportManager();
}

export async function getMultilingualSupportResponse(
  query: string,
  context: SupportContext,
  userId: string,
  targetLanguage?: SupportedLanguage
): Promise<MultiLanguageResponse> {
  const manager = new MultiLanguageSupportManager();
  return manager.generateMultilingualResponse(query, context, userId, targetLanguage);
}